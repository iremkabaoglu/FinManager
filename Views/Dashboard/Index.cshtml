@model FinManager.Models.DashboardViewModel
@using System.Text.Json

@{
    ViewData["Title"] = "Dashboard";

    // JS'e güvenli JSON
    var dailyLabelsJson = JsonSerializer.Serialize(Model.DailyLabels);
    var dailySeriesJson = JsonSerializer.Serialize(Model.DailySeries);
    var catLabelsJson = JsonSerializer.Serialize(Model.CategoryLabels);
    var catSeriesJson = JsonSerializer.Serialize(Model.CategorySeries);
}

<div class="row g-3 mb-3">
    <div class="col-md-4">
        <div class="border rounded p-3">
            <div class="text-muted">Income (last 30 days)</div>
            <div class="fs-3 fw-semibold">@Model.Income30.ToString("C0")</div>
        </div>
    </div>
    <div class="col-md-4">
        <div class="border rounded p-3">
            <div class="text-muted">Expense (last 30 days)</div>
            <div class="fs-3 fw-semibold">@Model.Expense30.ToString("C0")</div>
        </div>
    </div>
    <div class="col-md-4">
        <div class="border rounded p-3">
            <div class="text-muted">Net</div>
            <div class="fs-3 fw-semibold">@Model.Net30.ToString("C0")</div>
        </div>
    </div>
</div>

<div class="row g-3">
    <div class="col-md-8">
        <div class="border rounded p-3">
            <div class="mb-2 fw-semibold">Daily Balance (last 30 days)</div>
            <div style="height: 320px;">
                <canvas id="dailyChart"></canvas>
            </div>
        </div>
    </div>
    <div class="col-md-4">
        <div class="border rounded p-3">
            <div class="mb-2 fw-semibold">Expenses by Category</div>
            <div style="height: 320px;">
                <canvas id="expensePie"></canvas>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

    <script>
        // JSON.parse ile TS1109 uyarılarını da susturuyoruz
        const dailyLabels = JSON.parse('@Html.Raw(dailyLabelsJson)');
        const dailySeries = JSON.parse('@Html.Raw(dailySeriesJson)');
        const catLabels   = JSON.parse('@Html.Raw(catLabelsJson)');
        const catSeries   = JSON.parse('@Html.Raw(catSeriesJson)');

        // --- Dinamik y-ekseni (padding'li) ---
        const minVal = Math.min(...dailySeries);
        const maxVal = Math.max(...dailySeries);
        const pad    = Math.max(1, (maxVal - minVal) * 0.1);

        // Line chart
        const ctx1 = document.getElementById('dailyChart').getContext('2d');
        new Chart(ctx1, {
          type: 'line',
          data: {
            labels: dailyLabels,
            datasets: [{
              label: 'Net (₺)',
              data: dailySeries,
              borderWidth: 2,
              pointRadius: 2,
              tension: 0.3,
              fill: false
            }]
          },
          options: {
            responsive: true,
            maintainAspectRatio: false,
            scales: {
              y: {
                min: Math.floor(minVal - pad),
                max: Math.ceil(maxVal + pad),
                ticks: {
                  callback: v => new Intl.NumberFormat('tr-TR', {
                    style: 'currency', currency: 'TRY', maximumFractionDigits: 0
                  }).format(v)
                }
              },
              x: {
                ticks: { maxRotation: 0, autoSkip: true }
              }
            },
            plugins: {
              legend: { display: true }
            }
          }
        });

        // Doughnut chart (sadece giderler)
        const ctx2 = document.getElementById('expensePie').getContext('2d');
        new Chart(ctx2, {
          type: 'doughnut',
          data: {
            labels: catLabels,
            datasets: [{
              data: catSeries
            }]
          },
          options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
              legend: { position: 'bottom' }
            }
          }
        });
    </script>
}
